const insertUser = async (req, res) => {
  try {
    const { name, email, password, confirmPassword, mobile, referralCode } =
      req.body;
    const existingUser = await User.findOne({ email: email });

    if (existingUser) {
      return res.render("register", { message: "Email already exists" });
    }

    const spassword = await securePassword(password);

    let referrer = null;
    if (referralCode) {
      referrer = await User.findOne({ referralCode: referralCode });
      if (!referrer) {
        return res.render("register", { message: "Invalid referral code" });
      }
    }

    const generatedReferralCode = await generateReferralCode();

    req.session.user = {
      username: req.body.name,
      email: req.body.email,
      mobile: req.body.mobile,
      password: spassword,
      referralCode: generatedReferralCode,
    };

    if (!name || !mobile || !email || !password || !confirmPassword) {
      return res.render("register", {
        message: "All fields should be filled",
      });
    }

    if (!/^\d{10}$/.test(req.body.mobile)) {
      return res.render("register", {
        message: "Mobile number must be 10 digits",
      });
    }

    if (!/^\w+([\.-]?\w+)@\w+([\.-]?\w+)(\.\w{2,3})+$/.test(req.body.email)) {
      return res.render("register", { message: "Invalid email format" });
    }

    if (/\d/.test(req.body.name)) {
      return res.render("register", {
        message: "Name should not contain numbers",
      });
    }

    const passwordRegex =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (!passwordRegex.test(req.body.password)) {
      return res.render("register", {
        message: "Password must be...",
      });
    }

    const existingMobileUser = await User.findOne({ mobile: mobile });
    if (existingMobileUser) {
      return res.render("register", {
        message: "Mobile number already exists",
      });
    }

    const mobileRegex = /^\d{10}$/;
    if (!mobileRegex.test(req.body.mobile)) {
      return res.render("register", {
        message: "Mobile number must be 10 digits",
      });
    }

    if (req.body.password !== req.body.confirmPassword) {
      return res.render("register", { message: "Passwords do not match" });
    }

    // const newUser = new User({
    //   username: name,
    //   email: email,
    //   password: spassword,
    //   mobile: mobile,
    //   referralCode: generatedReferralCode,
    // });

    // await newUser.save();

    if (referrer) {
      const referralBonus = 100; // Example referral bonus amount
      referrer.wallet += referralBonus;
      newUser.wallet += referralBonus;
      await referrer.save();
    }

    // Save the user document
    // await newUser.save();

    const otp = Math.floor(100000 + Math.random() * 900000);
    req.session.otp = otp;
    console.log(otp, "oooooodjjjooooooooo");

    const phoneNumbers = [mobile]; // Add other phone numbers here if needed
    for (const phoneNumber of phoneNumbers) {
      const verification = await client.verify.v2
        .services(verifySid)
        .verifications.create({ to: `+91${phoneNumber}`, channel: "sms" });
      console.log(`OTP sent to ${phoneNumber}: ${otp}`);
    }
    res.render("verifyotp");
  } catch (error) {
    console.log(error.message);
    return res.render("register", { message: "an error occured" });
  }
};
const loadVerifyOTP = async (req, res) => {
  try {
    otpTimer = req.session.otpTimer || 0; // Get the OTP timer value from the session
    res.render("verifyotp", { otpTimer }); // Pass otpTimer as a local variable to the view
  } catch (error) {
    console.log(error.message);
  }
};
// Login user method
const loginLoad = async (req, res) => {
  try {
    res.render("login");
  } catch (error) {
    console.log(error.message);
  }
};

//otp timer
const startOtpTimer = (req, res, next) => {
  const otpExpiryTime = 1 * 60 * 1000; //Set OTP expiry time to 1 minutes (in milliseconds)
  // Set the OTP timer in the session
  if (!req.session.otpTimer) {
    req.session.otpTimer = otpExpiryTime;

    // Start the timer
    setTimeout(() => {
      req.session.otpTimer = undefined; // Clear the OTP timer after expiry
    }, otpExpiryTime);
  }
  next();
};

const verifyOtp = async (req, res) => {
  try {
    const otp = req.body.otp;
    if (otp == req.session.otp) {
      // OTP is correct, proceed with login
      const userData = req.session.user;
      req.session.user_id = req.session.user_id;
      req.session.otp = undefined; // Clear OTP after successful verification
      const user = new User({
        username: userData.username,
        email: userData.email,
        mobile: userData.mobile,
       
        password: userData.password,
      });
      req.session.user = null;
      
      await user.save();
      // return res.redirect('/login');
      return res.render("login", { message: "Register successful" });
    } else {
      // Incorrect OTP
      return res.render("verifyotp", { message: "Incorrect OTP" });
    }
  } catch (error) {
    console.log(error.message);
    return res.render("verifyotp", { message: "An error occurred" });
  }
};
const resendOtp = async (req, res) => {
  try {
   console.log("hjkskjdai");
   const otp = Math.floor(100000 + Math.random() * 900000);
   console.log(otp, "kpooookk");
   const mobile = req.session.user.mobile; // Assuming 'user' object contains 'mobile'
   console.log(mobile, "mobileeeeeeeeeeeeeeeeeee");
   const phoneNumbers = [mobile]; // Add other phone numbers here if needed
   //
   for (const phoneNumber of phoneNumbers) {
     console.log("dddddddd0ooooooooooodddddddddd");
     const verification = await client.verify.v2
       .services(verifySid)
       .verifications.create({ to: `+91${phoneNumber}`, channel: "sms" });

     console.log(`OTP sent to ${phoneNumber}: ${otp}`);
   }
  

    // Store the OTP and user data in the session
    req.session.otp = otp;
    const userData = req.session.user;

    if (!userData) {
      res.status(400).json({ message: "Invalid or expired session" });
    }

    req.session.user = {
      username: userData.name,
      email: userData.email,
      mobile: userData.mobile,
      password: userData.password,
      is_admin: userData.is_admin,
    };

    res.render("verifyotp", { message: "OTP resent successfully" });
  } catch (error) {
    console.log(error.message);
    return res.render("register", { message: "All fields should be filled" });
  }
};