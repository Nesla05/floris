[12:17 PM, 8/18/2023] Albert Brtcmp: const confirmorder = async (req, res) => {
    try {


        const userid = req.session.user_id
        const data = req.body;
        

        const payment = data.paymentOption
        const total = parseFloat(data.total);
        // console.log(total, 'poppppp');




        let deliveryadress = {
            name: data.name,
            adress: data.address,
            town: data.town,
            mobile: data.mobile,
            pincode: data.pincode,
            state: data.state
        }
        


        const usercart = await cart.findOne({ user: userid }).populate("cartitems.product")


        let usercarts = usercart.cartitems


        const items = usercarts.map((item) => {

            const product = item.product
            const price = item.product.price
            const quantity = item.quantity

            return { product, price, quantity }

        })
        if (!deliveryadress.name || !deliveryadress.adress || !deliveryadress.mobile || !deliveryadress.pincode || !deliveryadress.state || !deliveryadress.town) {

            return res.json({ error: "Invalid address" })
        }

        if (!deliveryadress || !total || !items || !userid) {
            return res.json({
                error: "something went wrong"
            })

        }

        const status ='placed'

        const neworder = new order({
            user: userid,
            items: items,
            total: Number(total),
            status: status,
            paymentmethod: payment,
            createdAt: new Date(),
            address: deliveryadress
        })
        const newid = await neworder.save()
        console.log(newid._id, 'loo');



        await usercart.cartitems.map(async (product) => {
            const stocks = product.product.stock - product.quantity

            await Product.findOneAndUpdate({ _id: product.product }, { $set: { stock: stocks } })
        })

        console.log(payment)
        if (payment === 'cod') {


            //    console.log("hii")

            res.json({ codStatus: true, orderid: newid._id })
        } else if (payment === "razorpay") {
            const orderid = newid._id
            // console.log(orderid,'generate');
            const order = await orderhelper.generateRazorpay(orderid, total)

            if (order) {

                res.json({ order: order, orderstatus: true })
            } else {
                return res.status(500).json({ message: 'Internal Sever Error' })
            }

        } else {

            const user = await User.findOne({ _id: userid })

            if (user.wallet >= total) {
                user.wallet -= total,
                    await user.save()
                await User.findOneAndUpdate({ _id: userid }, {
                    $push: {
                        walletTransactions: {
                            message: "Debited",
                            amount: total,
                            createdAt: Date.now()
                        }
                    }
                })
                console.log("Slbertt");
                res.json({ walletstatus: true, orderid: newid._id })

            } else {
                return res.json({ walletstatus: false })
            }


        }
        await cart.deleteOne({ user: userid })


        //  items.forEach((item) => {
        //     console.log(item.productid,'ji');
        //     console.log(item.price,'ji');
        //     console.log(item.quantity,'ji');
        //   });
        //   console.log(items,'ji');



    } catch (error) {
        console.log(error);
    }
}

const verifypayment = async (req, res) => {
    try {
        const orderid = req.body.order.receipt
        console.log(orderid, 'looop');
        console.log(req.body.response);
        await orderhelper.verifypayment(req.body.response).then(async () => {

            await order.findOneAndUpdate({ _id: orderid }, { $set: { status: "placed" } })
        }).catch((error) => {
            console.log(error);
        }).then(() => {
            console.log(orderid, '3223')
            console.log("payment successfull");
            res.json({ success: true, orderid: orderid })
        })


        //   if(result){
        //     console.log("testing");

        //     if(update){

        //     }
        //   }
    } catch (error) {
        console.log(error)
        res.status(500).json({ message: "Internal Server Error " })
    }
}


const vieworder = async (req, res) => {
    try {
        const id = req.query.id

        const userorder = await order.findOne({ _id: id }).populate("items.product")
        console.log(userorder)
        console.log(userorder)



        res.render('quickorderview', { userorder })
    } catch (error) {
        console.log(error);
    }
}
const generateRazorpay = async (orderid, total) => {
  try {

    var options = {
      amount: parseInt(total * 100), // amount in the smallest currency unit
      currency: "INR",
      receipt: orderid.toString(),

    };
    return new Promise((resolve, reject) => {
      instance.orders.create(options, function (err, order) {
        if (err) {

          reject(err)
        } else {

          resolve(order)
        }
      })
    })
  } catch (error) {
    console.log(error);
  }
}
const crypto = require("crypto");
const verifypayment = async (detials) => {
  try {
    return new Promise((resolve, reject) => {
      let hmac = crypto.createHmac("sha256", process.env.key_secret);
      const orderid = detials.razorpay_order_id
      const paymentid = detials.razorpay_payment_id
      const signature = detials.razorpay_signature
      hmac.update(orderid + "|" + paymentid);
      hmac = hmac.digest("hex")

    

      if (hmac == signature) {
        resolve();
      } else {
        reject();
      }

    })

  } catch (error) {
    console.log(error);

  }
}


module.exports = { generateRazorpay, verifypayment }